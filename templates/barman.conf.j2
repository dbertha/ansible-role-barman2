; Barman, Backup and Recovery Manager for PostgreSQL
; http://www.pgbarman.org/ - http://www.2ndQuadrant.com/
;
; Main configuration file

[barman]

active = {{ barman_active }}
; use archive command or not, use false if you want to use streaming replication possible value : true, false
archiver = {{ barman_archiver }}

;This option allows you to activate batch processing of WAL files for the archiver process, by setting it to a value > 0. 
;Otherwise, the traditional unlimited processing of the WAL queue is enabled. 
;When batch processing is activated, the archive-wal process would limit itself to maximum archiver_batch_size WAL segments per single run. 
;Integer. Global/Server. 
archiver_batch_size = {{ barman_archiver_batch_size }}

;This option allows you to use the PostgreSQLâ€™s streaming protocol to receive transaction logs from a server. 
;If set to on, Barman expects to find pg_receivexlog in the PATH (see path option) and that streaming connection for the server is working. 
;This activates connection checks as well as management (including compression) of WAL files. 
;If set to off (default) barman will rely only on continuous archiving for a server WAL archive operations, 
;eventually terminating any running pg_receivexlog for the server. Global/Server. Default : off
streaming_archiver = {{ barman_streaming_archiver }}

;This option allows you to activate batch processing of WAL files for the streaming_archiver process, ;
;by setting it to a value > 0. 
;Otherwise, the traditional unlimited processing of the WAL queue is enabled. 
;When batch processing is activated, the archive-wal process would limit itself to maximum streaming_archiver_batch_size WAL segments per single run. 
;Integer. Global/Server. 
streaming_archiver_batch_size = {{ barman_streaming_archiver_batch_size }}

;Identifier to be used as application_name by the receive-wal command. 
;Only available with pg_receivexlog >= 9.3. 
;By default it is set to barman_receive_wal. Global/Server. 
streaming_archiver_name = {{ barman_streaming_archiver_name }}

;Identifier to be used as application_name by the pg_basebackup command. 
;Only available with pg_basebackup >= 9.3. By default it is set to barman_streaming_backup. Global/Server. 
streaming_backup_name = {{ barman_streaming_backup_name }}

;Connection string used by Barman to connect to the Postgres server via streaming replication protocol. 
;By default it is set to conninfo. Server. 
streaming_conninfo = {{ barman_streaming_conninfo }}

;backup_directory = 

;Configure the method barman used for backup execution. 
;If set to rsync (default), barman will execute backup using the rsync command. 
;If set to postgres barman will use the pg_basebackup command to execute the backup. Global/Server. 
;set to postgres for streaming replication
backup_method = {{ barman_backup_method }}

;Physical replication slot to be used by the receive-wal command when streaming_archiver is set to on. 
;Requires PostgreSQL >= 9.4. Global/Server. Default: None (disabled). 
slot_name = {{ barman_slot_name }}


; Main directory
barman_home = {{ barman_home }}

; Locks directory - default: %(barman_home)s
barman_lock_directory = {{ barman_lock_directory }}

; System user
barman_user = {{ barman_user }}

; Log location
log_file = {{ barman_log_file }}

; Log level (see https://docs.python.org/3/library/logging.html#levels)
log_level = {{ barman_log_level }}

; Default compression level: possible values are None (default), bzip2, gzip or custom
compression = {{ barman_compression }}
custom_compression_filter = {{ barman_custom_compression_filter }}
custom_decompression_filter = {{ barman_custom_decompression_filter }}

; Incremental backup support: possible values are None (default), link or copy
reuse_backup = {{ barman_reuse_backup }}

; Pre/post backup hook scripts
pre_backup_script = {{ barman_pre_backup_script }}
pre_backup_retry_script = {{ barman_pre_backup_retry_script }}
post_backup_retry_script = {{ barman_post_backup_retry_script }}
post_backup_script = {{ barman_post_backup_script }}

; Pre/post archive hook scripts
pre_archive_script = {{ barman_pre_archive_script }}
pre_archive_retry_script = {{ barman_pre_archive_retry_script }}
post_archive_retry_script = {{ barman_post_archive_retry_script }}
post_archive_script = {{ barman_post_archive_script }}

; Directory of configuration files. Place your sections in separate files with .conf extension
; For example place the 'main' server section in /etc/barman.d/main.conf
configuration_files_directory = {{ barman_configuration_files_directory }}


; Minimum number of required backups (redundancy) - default 0 ;DEPRECATED
minimum_redundancy = {{ barman_minimum_redundancy }}

; Global retention policy (REDUNDANCY or RECOVERY WINDOW) - default empty
retention_policy = {{ barman_retention_policy }}
wal_retention_policy = {{ barman_wal_retention_policy }}
retention_policy_mode = {{ barman_retention_policy_mode }}

; Global bandwidth limit in KBPS - default 0 (meaning no limit)
bandwidth_limit = {{ barman_bandwidth_limit }}

; Immediate checkpoint for backup command - default false
immediate_checkpoint = {{ barman_immediate_checkpoint }}

; Enable network compression for data transfers - default false
network_compression = {{ barman_network_compression }}

; Identify the standard behavior for backup operations: possible values are
; exclusive_backup (default), concurrent_backup
backup_options = {{ barman_backup_options }}

; Number of retries of data copy during base backup after an error - default 0
basebackup_retry_times = {{ barman_basebackup_retry_times }}

; Number of seconds of wait after a failed copy, before retrying - default 30
basebackup_retry_sleep = {{ barman_basebackup_retry_sleep }}

; Maximum execution time, in seconds, per server
; for a barman check command - default 30
check_timeout = {{ barman_check_timeout }}

; Time frame that must contain the latest backup date.
; If the latest backup is older than the time frame, barman check
; command will report an error to the user.
; If empty, the latest backup is always considered valid.
; Syntax for this option is: "i (DAYS | WEEKS | MONTHS)" where i is an
; integer > 0 which identifies the number of days | weeks | months of
; validity of the latest backup for this check. Also known as 'smelly backup'.
last_backup_maximum_age = {{ barman_last_backup_maximum_age }}

;; ; 'main' PostgreSQL Server configuration
;; [main]
;; ; Human readable description
;; description =  "Main PostgreSQL Database"
;;
;; ; SSH options
;; ssh_command = ssh postgres@pg
;;
;; ; PostgreSQL connection string
;; conninfo = host=pg user=postgres
;;
;; ; Minimum number of required backups (redundancy)
;; ; minimum_redundancy = 1
;;
;; ; Examples of retention policies
;;
;; ; Retention policy (disabled)
;; ; retention_policy =
;; ; Retention policy (based on redundancy)
;; ; retention_policy = REDUNDANCY 2
;; ; Retention policy (based on recovery window)
;; ; retention_policy = RECOVERY WINDOW OF 4 WEEKS

{% for server in barman_servers %}
[{{ server.name }}]
description = {{ server.description }}
conninfo = host={{ server.conn_host }} port={{ server.conn_port }} user={{ server.conn_user }} dbname=postgres
backup_method= {{server.backup_method}}
{% if server.backup_method == 'postgres' %}
streaming_conninfo = {{ server.streaming_conninfo }}
streaming_archiver = {{ server.streaming_archiver }}
slot_name = {{ server.slot_name }}
{% endif %}
{% if server.backup_method == 'rsync' %}
ssh_command = {{ server.ssh_command }}
reuse_backup = {{ server.reuse_backup }}
archiver = {{ server.archiver }}
{% endif %}
minimum_redundancy = {{ server.minimum_redundancy }}
retention_policy = {{ server.retention_policy }}

{% endfor %}

